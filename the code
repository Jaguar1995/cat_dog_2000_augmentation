'''
#数据下载 https://www.kaggle.com/c/dogs-vs-cats/data
#copy images to train,validation and test

import os
import shutil

# 图像地址
original_dataset_dir = 'E:\Python\python3program\cat\train'
#新建一个存储模型数据（train,validation and test）（图片）的地址
base_dir = 'E:\Python\python3program\cat\cats_and_dogs_small'
os.mkdir(base_dir)

#新建存储train,validation and test的文件
train_dir = os.path.join(base_dir, 'train')
os.mkdir(train_dir)
validation_dir = os.path.join(base_dir, 'validation')
os.mkdir(validation_dir)
test_dir = os.path.join(base_dir, 'test')
os.mkdir(test_dir)

#在上面新建文件里分别创建存储cats and dogs 的文件
train_cats_dir = os.path.join(train_dir, 'cats')
os.mkdir(train_cats_dir)
train_dogs_dir = os.path.join(train_dir, 'dogs')
os.mkdir(train_dogs_dir)
validation_cats_dir = os.path.join(validation_dir, 'cats')
os.mkdir(validation_cats_dir)
validation_dogs_dir = os.path.join(validation_dir, 'dogs')
os.mkdir(validation_dogs_dir)
test_cats_dir = os.path.join(test_dir, 'cats')
os.mkdir(test_cats_dir)
test_dogs_dir = os.path.join(test_dir, 'dogs')
os.mkdir(test_dogs_dir)

#从源文件copy文件到上述文件
fnames = ['cat.{}.jpg'.format(i) for i in range(1000)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(train_cats_dir, fname)
    shutil.copyfile(src, dst)
fnames = ['cat.{}.jpg'.format(i) for i in range(1000, 1500)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(validation_cats_dir, fname)
    shutil.copy(src, dst)
fnames = ['cat.{}.jpg'.format(i) for i in range(1500, 2000)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(test_cats_dir, fname)
    shutil.copy(src, dst)

fnames = ['dog.{}.jpg'.format(i) for i in range(1000)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(train_dogs_dir, fname)
    shutil.copyfile(src, dst)
fnames = ['dog.{}.jpg'.format(i) for i in range(1000, 1500)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(validation_dogs_dir, fname)
    shutil.copy(src, dst)
fnames = ['dog.{}.jpg'.format(i) for i in range(1500, 2000)]
for fname in fnames:
    src = os.path.join(original_dataset_dir, fname)
    dst = os.path.join(test_dogs_dir, fname)
    shutil.copy(src, dst)

#检测copy数量成功与否
print('training_cats', len(os.listdir(train_cats_dir)))
print('training_dogs', len(os.listdir(train_dogs_dir)))
print('validation_cats', len(os.listdir(validation_cats_dir)))
print('validation_dogs', len(os.listdir(validation_dogs_dir)))
print('test_cats', len(os.listdir(test_cats_dir)))
print('test_dogs', len(os.listdir(test_dogs_dir)))
'''

'''
#扩充图像数据
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
import os

datagen = ImageDataGenerator(
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')
# path = ['E:\Python\python3program\cat\cats_and_dogs_small\\train\cats', 'E:\Python\python3program\cat\cats_and_dogs_small\\train\dogs']
for sub_path in path:
    for a, b, c in os.walk(sub_path):
        for cc in c:
            img_add = os.path.join(a, cc)
            img = load_img(img_add)  # 这是一个PIL图像
            x = img_to_array(img)  # 把PIL图像转换成一个numpy数组，形状为(3, 150, 150)
            x = x.reshape((1,) + x.shape)  # 这是一个numpy数组，形状为 (1, 3, 150, 150)

            # 下面是生产图片的代码
            # 生产的所有图片保存在源目录下
            j = 0
            #这里和下面的'dog.'有问题，应该用切分的方法适用'cat'和'dog'
            name = 'dog.' + str(cc).split('.')[-2] + '.' + 'j'
            for batch in datagen.flow(x, batch_size=1,
                                  save_to_dir=sub_path, save_prefix=name, save_format='jpg'):
                j += 1
                name = 'dog.' + str(cc).split('.')[-2] + '.' + 'j'
                if j > 4:
                    break  # 否则生成器会退出循环
'''
import time
start_time = time.clock()
#预处理图像
from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img

train_dir = 'E:\Python\python3program\cat\cats_and_dogs_small\\train'
validation_dir = 'E:\Python\python3program\cat\cats_and_dogs_small\\validation'
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(train_dir, target_size=(150, 150), batch_size=20, class_mode='binary')
validation_generator = test_datagen.flow_from_directory(validation_dir, target_size=(150, 150), batch_size=32, class_mode='binary')


#Building your network

from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout
from keras import optimizers

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPool2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPool2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPool2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPool2D((2, 2)))
model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.summary()

model.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(lr=1e-4), metrics=['accuracy'])

history = model.fit_generator(train_generator, steps_per_epoch=200, epochs=30,
                              validation_data=validation_generator, validation_steps=50)

model.save('cats_and_dogs_small_2.h5')

end_time = time.clock()
print('Running this program used time:', (end_time - start_time))

#Displaying curves of loss and accuracy during training

import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and Validation loss')
#用于显示标签，即label。
# plt.legend(loc=0,ncol=2)#图例及位置： 1右上角，2 左上角 loc函数可不写 0为最优 ncol为标签有几列
plt.legend()
#显示图片
plt.show()
